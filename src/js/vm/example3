%from javascript's compiler
(141,144,120,110,21,52,111,110,131,22,32,113,24,130,22,132,58,70,20,20,136,71,20,112,113,72,111,132,145,22,130,146,22,130,147,22,130,136,2,0,0,0,32,239,24,7,129,222,179,141,148,74,245,17,98,234,191,250,140,154,220,86,199,215,149,149,53,130,241,24,154,110,163,211,166,10,10,10,30,132,22,2,0,0,0,32,36,89,210,27,16,40,123,32,237,64,118,219,245,76,144,40,190,218,209,124,96,64,58,217,108,213,16,84,89,92,250,40,113,31,20,132,165,22,130,3,36,22,130,3,49,22,130,136,58,30,20,20,31)

%from the awk compiler
(132 142 4 0 4 21 131 22 32 113 24 130 22 132 70 20 20 136 71 20 112 113 72 132 4 0 5 22 130 4 0 6 22 130 0 0  0  0  0  22 130 136 2 0 0 0 32 1e5e740033ce4ec79de021d7b37828515d1bc38672283e28329a931ccebe719a10 10 10 30 132 22 2 0 0 0 32 a6303892b99653042c1d67b5d23bc6521d572795553ca81459650299ea195252113 31 20 132 142 22 130 4 0 36 22 130 4 0 49 22 130 136 30 20 20 31 )

( a b c 
multiline comment
)
var foo bar ; %variable declaration
foo 4 ! %storing a value in the variable
macro [ nil ; forth style comment
macro , swap cons ;
macro ] , reverse ;
: square dup * ;
: map2
  car swap r@ call rot cons swap
  nil ==
  if
    drop drop reverse 
  else 
    drop recurse call 
  then ; 
macro map 
  >r nil swap map2 call r> drop 

; 
macro test 
[ 5,6, 7] 
square print print print map 
[25, 36, 49] 
== >r drop drop r> 
;
test